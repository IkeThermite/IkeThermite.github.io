'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/5-archives/example/table-of-contents/with-toc/','title':"With ToC",'content':"Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"});index.add({'id':1,'href':'/docs/2-projects/','title':"Projects",'content':""});index.add({'id':2,'href':'/docs/5-archives/example/table-of-contents/without-toc/','title':"Without ToC",'content':"At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"});index.add({'id':3,'href':'/docs/3-areas/','title':"Areas",'content':""});index.add({'id':4,'href':'/docs/4-resources/','title':"Resources",'content':""});index.add({'id':5,'href':'/docs/5-archives/','title':"Archives",'content':"Archives "});index.add({'id':6,'href':'/posts/creating-a-new-theme/','title':"Creating a New Theme",'content':"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.\nWe'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I've added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere's an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r$\rSome Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rTake a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We'll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rSee that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rConnect to the listed URL (it's on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml\rThat's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\rThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.\nAt this point, you've got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe're going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026quot;michael d henderson\u0026quot;\rdescription = \u0026quot;a minimal working template\u0026quot;\rlicense = \u0026quot;MIT\u0026quot;\rname = \u0026quot;zafta\u0026quot;\rsource_repo = \u0026quot;\u0026quot;\rtags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;\rNote that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$\rUpdate the Configuration File to Use the Theme Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026quot;zafta\u0026quot;\rbaseurl = \u0026quot;\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtitle = \u0026quot;zafta - totally refreshing\u0026quot;\rMetaDataFormat = \u0026quot;toml\u0026quot;\r:wq\r$\rGenerate the Site Now that we have an empty theme, let's generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$\rDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.\nLet's check the public/ directory to see what Hugo's created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$\rNotice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rIf it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo's Watch Option Hugo's \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that's totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose\rHere's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms\rUpdate the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$\rBuild the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;\rLive Reload Note: If you're running the server with the --watch option, you'll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn't very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026quot;\u0026quot;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot;\rtitle = \u0026quot;first\u0026quot;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot;\rtitle = \u0026quot;second\u0026quot;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$\rThe output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$\rThe new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026quot;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.\nAdd Content to the Posts We're working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don't do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let's see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\rWe could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.\nRemember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCreate a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\rAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.\nCreating Top Level Pages Let's add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026quot;about\u0026quot;\rdescription = \u0026quot;about this site\u0026quot;\rdate = \u0026quot;2014-09-27\u0026quot;\rslug = \u0026quot;about time\u0026quot;\r+++\r## about us\ri'm speechless\r:wq\rGenerate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html\rNotice that the page wasn't created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://'\r+ (location.host || 'localhost').split(':')[0]\r+ ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/'\r+ 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rNotice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That's not desirable, so let's change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026quot;page\u0026quot; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html\rKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026quot;/:title/\u0026quot;\rabout = \u0026quot;/:filename/\u0026quot;\rGenerate the web site and verify that this didn't work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.\nWe can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rUpdate the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}\rversus\n{{ partial \u0026quot;header.html\u0026quot; . }}\rBoth pass in the context.\nLet's change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It's usually the date the content was created, but let's pretend that's the value we want to display.\nAdd “Date Published” to the Template We'll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\rPosts use the default single template, so we'll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.\nLet's restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNow we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.\nDon't Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.\n"});index.add({'id':7,'href':'/posts/migrate-from-jekyll/','title':"Migrate to Hugo from Jekyll",'content':"Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\r should become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\r Additionally, you'll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you'll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\r   Or, change the Hugo configuration to use _site instead of public.\n {\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\r   Convert Jekyll templates to Hugo templates That's the bulk of the work right here. The documentation is your friend. You should refer to Jekyll's template documentation if you need to refresh your memory on how you built your blog and Hugo's template to learn Hugo's way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It's fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll's plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\r is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\r Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\r to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\r As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You'll want to remove the Jekyll configuration at this point. If you have anything else that isn't used, delete it.\nA practical example in a diff Hey, it's Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':8,'href':'/docs/3-areas/brazilian-jiu-jitsu/','title':"Brazilian Jiu Jitsu",'content':""});index.add({'id':9,'href':'/','title':"Home",'content':"The Commonplace Book My goal is to create a webpage to serve as a personal knowledge management system (PKM). I'm inspired by the Everything I know PKM Gitbook by Nikita Voloboev as well the Building a Second Brain course by Tiago Forte. I have provided my own take on his system here.\nAlthough I use Evernote for note management fairly effectively, its formatting is not rich enough for what I want to achieve. An option was Notion but I am committed to storing all my knowledge in plain text.\nWhat I want for my webpage:\n Static Minimalist Energy efficient Fast Complete easy workflow from within Emacs  Perhaps something like org-mode to md to html?   Something simple enough that I can understand it's inner workings  What I want my webpage to contain:\n Technical tutorials to remind myself how to accomplish complex tasks  Perhaps even checklists as motivated by [The Checklist Manifesto](#The Checklist Manifesto)?   Easy to navigate Brazilian Jiu Jitsu knowledge database  Other options I considered for creating this webpage:\n Pelican, which uses Python and can use either Markdown or reStructuredText Jekyll, which uses Ruby and Markdown (and which I've used briefly before) Gitbooks, based on Github and used by Nikita  Things I don't yet know how to do:\n Continuous integration and deployment with Travis CI  "});index.add({'id':10,'href':'/docs/3-areas/brazilian-jiu-jitsu/brazilian_jiu_jitsu/','title':"Notes",'content':"Compiled Brazilian Jiu Jitsu Notes Current Work  Add Lovato's Toreando sequence to the Stack Passing Sequences Add Dump Sweep $\\rightarrow$ Berimbolo Investigate using the Estima Lock as a counter to the High Step when Toreando passing Shin to Shin Guard to Deep Half Sweep vs Standing Opponent Pressure Passing the Collar Sleeve Guard Scarf Hold entries and attacking sequences Follow up to the Breadcutter Choke (maybe the far side Arm Triangle?)  The Canon The canon refers to our curated collection of instructionals by the top coaches or grapplers in the world.\n\rThe Canon\r\u0026#43;\r\rGi Instructionals:\n John Danaher - Go Further Faster Vol 1 - Pin Escapes John Danaher - Go Further Faster Vol 2 - Guard Retention John Danaher - Go Further Faster Vol 3 - Half Guard John Danaher - Go Further Faster Vol 4 - Closed Guard  No gi Instructionals:\n Gordon Ryan - Systematically Attacking the Guard Gordon Ryan - Systemizing Closed Guard John Danaher - Enter the System - Armbars John Danaher - Enter the System - Back Attacks John Danaher - Enter the System - Front Headlocks John Danaher - Enter the System - Kimura John Danaher - Enter the System - Leg Locks John Danaher - Enter the System - Triangles Lachlan Giles - High Percentage Chokes - No Gi Lachlan Giles - Leg Lock Anthology - 50/50 Lachlan Giles - The Guard Passing Anthology - Half Guard Lachlan Giles - The Half Guard Anthology  \r\r\rGi Guard Passing Guard Passing Sequences   Stack Passing Sequence\n  Sources\n Bruno Frazatto - Complete Guard Passing Encyclopedia FloGrappling - Bruno Frazatto: Passing Series Rafael Lovato Jr - Ultimate Pressure Passing System Stack Pass by Fabio Gurgel    Closed Guard -\u0026gt; Full Staple:\nSequence is from Fabio Gurgel.\n Right hand double lapel grip. Left hand punch down by the hip. Step up right leg. Instead of stepping left leg up, pivot the foot out slightly, then stretch the leg back. My left arm must be locked in place. His guard must break as I stand. I finish the stand bent over, but with my back straight. I have a staggered stance (left foot back). By pinching my lead (right) knee in, I can make it difficult for him to pull guard. I pull my right elbow back tight onto my knee. Now I step my left leg forward (square), take a straight lapel grip and connect my left knee to my elbow. My opponent now has to hip escape to one side. I want to tilt him to one side. I begin driving my left knee to the mat over his thigh (Staple) and take my Scoop Grip with my right hand (Straight Lapel Grip) -\u0026gt; Full Staple. This step can also be done by waiting for my opponent to Hip Escape. Full Staple:  Left knee through, pointing in towards his hip. Toes hooked pointing out. His leg on my right shoulder, right hand Mid Straight Lapel Grip, right elbow tight. Head low, looking across far shoulder. Whole body oriented into him. Palm facing on left pants grip to defend against Ude Katame and Sankaku.      Full Staple -\u0026gt; Stack Pass:\n Left hand feeds High Cross Lapel grip to right hand. Take Thumb Down grip. Move left hand back to his leg, elbow tight, safe peosition. Drive forward off the toes, changing direction from top near shoulder to far shoulder. Take left hand all the way to the back of his pants. Bring his hip high and place my left knee underneath it to take his weight.\\ Press belly forward to complete the pass (into the side of his hip) to complete the pass. DON'T walk around!    Stack Pass -\u0026gt; [Strong Frames] -\u0026gt; Full Staple:\nMy opponent frames too well (my hips and head) for me to complete the Stack.\n As above, I initiate the Stack to my right side and take my lapel grip. Opponent frames my hip well, and he frames my face. I can't penetrate over the bicep. Now I switch sides, going to Full Staple position with my left knee through.    Full Staple -\u0026gt; Long Step:\nThe gripping here is different to the Back Step, where I would keep my right hand cupping the leg.\n Make sure I am looking to the other side now, both knees pointing in a new direction. I am keeping my lapel grip with my right hand, I release my left hand grip and reach deep over his near shoulder (Cross Face), for his far armpit. I must hug the head for a Long Step pass. Now release the lapel grip and Long Step. Move the right hand to the bottom knee. As I step, try to get my hips in line with his head.    Full Staple -\u0026gt; Long Step -\u0026gt; [Bicep Frame] -\u0026gt; Knee Slide:\nMy opponent prevents the control of the head necessary for the Long Step.\n After I have switched to the Full Staple as above, my opponent blocks my bicep preventing the Cross Face. When he cups my bicep, my left hand immediately cups his tricep. Grap and pull in. Keep lapel grip and keep looking over his far shoulder. Open my left knee for some space. Raise my hips and cut my right knee through. As soon as it lands, post my left leg out. Apply pressure to stretch him out. If can pummel my left arm through, the Overhook is better. I cut my right knee through, then reverse, walking my knees underneath him. I can let the collar grip go when I have set Cross Face.    Bull Fight -\u0026gt; [Strong Frames] -\u0026gt; Stack Pass -\u0026gt; [Heavy Leg] -\u0026gt; Over Under:\nNOTE: Bull Fight -\u0026gt; [Strong Frames / High Step] -\u0026gt; Stack vs Bull Fight -\u0026gt; [Up on Elbow] -\u0026gt; Switch Sides\n Bull Fight Position: Opponent is on his back, my right hand at his left hip, my left hand gripping his knee. Use my outside (right) elbow to control his far leg. As he frames powerfully, I knock my right elbow underneath his knee and pummel for the Stack (lapel grip). Throughout, I am keeping his left knee pinned to the mat. When I take a Scoop grip, my grip must be behind his leg (to make the Triangle hard). If he becomes heavy on that leg to prevent me reaching his lapel, I can grab his belt instead. Drop my shoulder in to the Over Under position. (Always walk back to the center to flatten.)    Stack Pass -\u0026gt; [Strong Frames] -\u0026gt; Over Under:\n As above, I initiate the Stack to my right side, and take my lapel grip (close my elbow!). Opponent frames my hip well, and he frames my face. I can't penetrate over the bicep. Using my left hand, push his knee all the way down, until his leg is almost straight. Jump over my own left arm. As my left knee connects outside his leg, let the grip go and grab over his leg. Completely change angle to the other side. Move right hand to the near lapel. Pinch my knees, keeping my opponent's feet off the mat. My opponent will hook with his right leg. I walk back towards his hips, until his hips are flat. Then I can Windshield Wiper my leg out. Ideally, reach under this arm to grip behind his collar with my left hand. Lapel grip is the last grip to give up.    Stack Pass -\u0026gt; Double Under:\n As above, I initiate the Stack to my right side, and take my lapel grip (close the elbow!). Pinch my left knee down onto his leg for control. Release my left knee grip and take a hip grip under his thigh. Square up and start to Double Under Stack.    Full Staple -\u0026gt; Long Step -\u0026gt; [High Step] -\u0026gt; Duck Under:\nAfter the \u0026ldquo;completion\u0026rdquo; of the Long Step, my opponent steps his far leg over my head.\n After the completion of the Long Step, my opponent frames me away. He starts to hip escape and weave his far leg over (I control his bottom leg). Underhook (Duck Under) his weaving leg with my left arm and close my left elbow. Drive to my left (over his head), not across. Slide my right knee through (staple), then release my right hand and reach for his hips (belt behind his back). As I Windshield Wipe my left leg, I start to stack immediately, keeping my grip on his hips. Drag his leg tight with my left hand, then pummel it over and grip his collar.      Over Under Pass   Guard Retention\n  Guard Retention Phases:\n Opponent is kneeling, trapping one of my legs between his with a low grip on my gi pants. He has his other arm underneath my far leg, gripping my belt. Opponent has tripoded up, connected his shoulder to my centerline and placed his head in position. He is attempting to cover my knee. Opponent has covered my knee and is attempting to reverse / square up, pointing my hips away from him. Alternative: Opponent is just about to cover my knee, but I have deep / good inside leg position.    Phase 1: [Opponent has grips] -\u0026gt; Frame and Hip Escape\nOpp. is sitting on top of one foot, low grip on gi pants, far arm under far leg. Everything begins with the lead shoulder. What keeps his shoulder in place is his head position.\n Post heel of near hand against opponent's shoulder. Insert Cross Collar grip with far hand to block lead shoulder (hasn't solved far shoulder problem, opp. can shake his head left and right). Hip out to the far side and bring knee as a wedge to his far shoulder. My knee and elbow connect. As soon as I can, shift a little more out and bring my foot to his shoulder. Pummel foot through, make space and free trapped leg. Immediately go to Closed Guard.    Phase 2: [Opponent in Tripod] -\u0026gt; Move Head\nToo late to prevent lead shoulder position, he has connected his shoulder to my centerline and placed his head in position. I must try to prevent him from covering my knee. Before he covers my knee, I can attempt to move his head to the other side.\n Take my forearm and hold his head. Push off my knee and straighten my body out. Moving my body around his head. Take opposite elbow over his head and start to come up (using my leg like a pendulum), reaching to grab his belt and covering his head. Grab his gi pants and bump him down to his shoulder.  If he brings his head back to the center, go to Triangle Lock / Closed Guard instead.   Place hand on the floor and come up.      Passing Sequences\n  Guard Butterfly Guard Ude Gatame (Fabio Gurgel) https://www.youtube.com/watch?v=GCLBedHHQvM Shoulder Lock Sweep (Gordon Ryan) https://www.youtube.com/watch?v=VFbUih8C-Lk\nCollar-Sleeve and De La Riva Guard   Sources:\nGianni Grippo - All About the Bolo Felipe Pena - Back Take from De La Riva Jon Thomas - Understanding De La Riva TECH/STRG - 5 Collar \u0026amp; Sleeve Drills to Improve Your Open Guard Lachlan Giles - Triangle Choke and Overhead Sweep\n  Seated Guard -\u0026gt; Collar Sleeve\nThe game is about getting a single Straight Sleeve Grip. Everything comes from there.\n Establish Collar and Sleeve grips. (I can set this up with just the sleeve, by being aggressive with the Half Lasso.) Fall back immediately. Right foot to bicep, left foot takes Half Lasso (in front of neck). Goal is to get his gripped hand above my hips. Now the left foot can safely unwind and go to the hip. Left foot is responsible for the posture control.    Collar Sleeve -\u0026gt; Triangle\n First ensure his posture is properly broken. Turn to my left hip (move my hips out a bit to my right), so that my left knee is inside his knee.  This ensures that if he squats back, it doesn't save him from the Triangle.   Stomp down with both feet, pull him forward, and raise my hips into his armpit. Right foot moves first, then left.    Collar Sleeve -\u0026gt; Overhead Sweep\n Move foot from bicep to hip. Push away with both feet while pulling my hips off the mat and underneath my opponent. Pull my partner forward with my grips and tuck my knees to my chest. Extend my legs and pull the collar over my head. At the last moment, push the collar down towards my hips to flip my opponent overhead. Back roll to mount.    Collar Sleeve -\u0026gt; [Grip Break] -\u0026gt; Tripod Sweep\n  Collar Sleeve -\u0026gt; [Combat Base] -\u0026gt; DLR Dump Sweep\nNote that Combat Base requires that he has his knee inside my knee. If he doesn't -\u0026gt; Triangle.\n  Collar Sleeve -\u0026gt; [Clears the Foot] -\u0026gt; Collar Sleeve De La Riva -\u0026gt; Overhead Sweep\n  Collar Sleeve -\u0026gt; Overhead Sweep -\u0026gt; [Squat Base] -\u0026gt; DLR Dump Sweep\n Set up for Overhead Sweep as above, but partner bases back when I try to pull him forward (Step 3). I use a pendulum motion to take the near side foot to Deep DLR Hook and I tuck his sleeve behind my calf. (I want my hips out to the side) Push with my right foot and invert to left shoulder to finish (DLR Dump Sweep Position). As he starts to fall, release the Sleeve Grip.    Collar Sleeve -\u0026gt; Overhead Sweep -\u0026gt; [Squat Base] -\u0026gt; DLR Dump Sweep -\u0026gt; [Back Step Base] -\u0026gt; Cross Sleeve DLR -\u0026gt; Back Take\nNOTE: This is experimental.\n I am attempting the Dump Sweep, but my opponent's base is too good OR he back steps his far leg. Make sure my hips are out to the side (on top of his foot) and my hook is deep. Release the Collar Grip and pass his sleeve from my left hand to my right hand. Plant my right foot on the mat and try to kick him back with my Deep DLR hook. Also use that base to hip escape towards his far leg so that I can grip his leg with my left hand. Pummel my right foot inside and use it to square myself behind him. The pants and sleeve grip prevent motion to either side. Once I'm square, reach my right hand up to his belt or pants.    DLR Dump Sweep -\u0026gt; Basic Berimbolo\n From DLR Dump Sweep: Left leg is Deep DLR Hook, right leg on top, right hand Armpit Collar Grip. Use the Collar Grip and pull myself in to head butt my opponent's hip. As I raise my elbow, I invert, ducking my head under my arm -\u0026gt; Berimbolo Position. Hook both feet on the far side of my opponent (active toes / back heeling). Reach my left hand for his far hip and grab the pants. Roll over my right shoulder and kick my feet hard to the mat. Pull right hand out and reach for the back of the collar. Pull myself up until my head is above his head and then insert second hook (left leg). Push off the mat with my feet to help the climb.    "});index.add({'id':11,'href':'/docs/3-areas/programming/','title':"Programming",'content':""});index.add({'id':12,'href':'/docs/3-areas/programming/working_with_pelican/','title':"Working with Pelican: Assorted Notes",'content':"Working with Pelican: Assorted Notes Using Pandoc to Convert Formats Note that the -s specifies to create a standalone document. The general structure:\npandoc inputfile.ext -f fromtype -t totype -s -o outputfile.ext\rWhen converting from Markdown (specifically Kramdown, when I was editing files using VS Code before the switch to Emacs) to reStructuredText, I was getting some weird character rendering. Is there a neat Unicode-related argument that I can pass to Pandoc to sort this out?\nOkay, the Pandoc docs say that it works with UTF-8, and the lower-right hand corner of my VS Code window says that my Markdown file is encoded with UTF-8. So that's not it.\nRendering Mathematics with Pelican To neatly render the mathematics inside my Pelican posts, I use the Pelican plugin render_math. Since I don't want to clone / download the entire set of Pelican plugins, I used DownGit to grab render_math and place it in mostly-conjecture/plugins/render_math. Then I modify my pelicanconf.py file:\nPLUGIN_PATHS = [\u0026#39;plugins\u0026#39;]\rPLUGINS = [\u0026#39;render_math\u0026#39;]\rBoom! Math is rendering nicely.\nPelican, reStructuredText and Centering Images In our minimalist stylesheet, we are not currently providing support for the image tag :align: center, i.e., if we place an image in an .rst file,\n.. image:: images/webpage_build_02.jpg\r :width: 600px\r :alt: Minimalist victory trumpets please.\r :align: center\rthe centering will be ignored, because the correct class, in this case, align-center, is not defined in the stylesheet. This apparently is a problem with the default Penguin themes as well, see this issue. The solution provided there is what I've implemented; I've added the following to my style.css:\n.align-center {\rdisplay: block;\rmargin-left: auto;\rmargin-right: auto;\r}\r"});index.add({'id':13,'href':'/docs/3-areas/programming/minimal_pelican_webpage/','title':"A Minimal Webpage with Pelican",'content':"A Minimal Webpage with Pelican Getting Started I already had Anaconda Python installed, so the first thing to do was to create a conda environment, which I called pelicansite,:\nconda create --name pelicansite\rand then activate it: :\nconda activate pelicansite\rThis is all done from the Anaconda Prompt so that the correct environment variables are set. Now I can install the pelican package (I don't need the optional argument for using markdown). :\nconda install pelican\rThen I create a folder for my webpage and navigate to it. :\nmkdir mostly-conjecture\rcd conjecture\rFinally, I can run pelican-quickstart. My answers to the various prompts are provided below.\nWelcome to pelican-quickstart v4.2.0.\rThis script will help you create a new Pelican-based website.\rPlease answer the following questions so this script can generate the files\rneeded by Pelican.\r\u0026gt; Where do you want to create your new web site? [.]\r\u0026gt; What will be the title of this web site? Mostly Conjecture\r\u0026gt; Who will be the author of this web site? Ralph Rudd\r\u0026gt; What will be the default language of this web site? [English]\r\u0026gt; Do you want to specify a URL prefix? e.g., https://example.com (Y/n) n\r\u0026gt; Do you want to enable article pagination? (Y/n) n\r\u0026gt; What is your time zone? [Europe/Paris] EST\r\u0026gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) y\r\u0026gt; Do you want to upload your website using FTP? (y/N) n\r\u0026gt; Do you want to upload your website using SSH? (y/N) n\r\u0026gt; Do you want to upload your website using Dropbox? (y/N) n\r\u0026gt; Do you want to upload your website using S3? (y/N) n\r\u0026gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n\r\u0026gt; Do you want to upload your website using GitHub Pages? (y/N) y\r\u0026gt; Is this your personal page (username.github.io)? (y/N) y\rThis created the following set of files: :\n\u0026lt;DIR\u0026gt; content\r\u0026lt;DIR\u0026gt; output\rMakefile\rpelicanconf.py\rpublishconf.py\rtasks.py\rAt this point I'm quite worried that I'm going to need to edit the Makefile before this is all over. It's been about 8 years since I've been in Make-hell, but I don't miss it in the least. Okay, before I can generate the site for the first time, I need some content.\nPelican will categorize the content based on the folder structure, unless I disable this. Since I intend to use the P.A.R.A. organizational system, that suits me just fine. I create the following file: :\n/content/areas/online-portfolio/creating_this_webpage.rst\rI fill it with the bare minimum necessary for it to build. For reasons unknown, it fails unless I include the date. So at this stage, creating_this_webpage.rst looks like this:\nCreating this Webpage with Pelican\r==================================\r:date: 2020-01-08\rNow I navigate to the root directory, mostly-conjecture, and build my webpage for the first time. :\npelican content\rThis gives me the following warning: :\nWARNING: Docutils has no localization for \u0026#39;english\u0026#39;. Using \u0026#39;en\u0026#39; instead.\rThis bothers me because the default for the pelican-quickstart prompt was english. I shudder to think I may have to edit the Makefile, but no, this is a variable set inside the pelicanconf.py file as DEFAULT_LANG. I change it from \u0026quot;English\u0026quot; to \u0026quot;En\u0026quot; and re-run pelican content. This time it runs without warnings or errors. :\nDone: Processed 1 article, 0 drafts, 0 pages, 0 hidden pages and 0 draft pages in 3.69 seconds.\rIn a separate Anaconda prompt I navigate to my site's directory and run:\npelican --listen\rI fire up Chrome and navigate to localhost:8000. Trumpets of victory! The first build of the webpage looks like this:\nModifying the Quickstart Page However, when I check my second Anaconda prompt (the one \u0026lsquo;\u0026lsquo;listening\u0026rsquo;'), I see that I've picked up a warning:\nWARNING: Unable to find `/favicon.ico` or variations:\rIt goes on to list some variations of the file it's looking for. I don't know what a favicon is, but Wikipedia is to the rescue. After a quick google (and it might have been a Quorum answer), I head to favicongenerator.net. I modify my Steam profile icon to be the recommended 260 by 260 pixels and favicongenerator.net generates a host of different size and types of favicons for me. But where exactly do I put it?\nLuckily, someone on StackOverflow has already asked \u0026quot;How to add a favicon to a pelican blog?\u0026quot;. So I place my favicon.ico inside the newly created mostly-conjecture\\content\\extras and add the following lines to my pelicanconf.py:\nSTATIC_PATHS = [\r\u0026#39;extra\u0026#39;,\r]\rEXTRA_PATH_METADATA = {\r\u0026#39;extra/favicon.ico\u0026#39;: {\u0026#39;path\u0026#39;: \u0026#39;favicon.ico\u0026#39;},\r}\rI rerun pelican content and pelican --listen (on the other prompt) and BOOM! The warning has disappeared.\nThere's a lot happening on the default page and I want to start by stripping some of that away. By commenting out the LINKS and SOCIAL variables inside my pelicanconf.py the page already shrinks quite a bit. But I don't want to work with the notmyidea theme; as there is too much going on. Instead, I follow this guide from Matt Makai (the \u0026quot;Modify Site Theme\u0026quot; section) as well as the Pelican documentation (see the Example at the end) and create my own, very basic theme.\nFirst, I create the theme directory. I'm calling my own theme notsosimple. From my site's root directory:\nmkdir themes/notsosimple/templates\rmkdir themes/notsosimple/static/css\rI create a templates/base.html:\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{% block title %}{% endblock %}\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;{{ SITEURL }}/theme/css/style.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r{% block content %}{% endblock %}\r\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rAs well as a static/css/style.css:\nbody {\rmax-width: 70ch;\rpadding: 2ch;\rmargin: auto;\r}\rThe code for base.html is different from Matt's guide, as instead of using the Bootstrap framework, I'm linking to my custom stylesheet. The stylesheet is from 58 bytes of css to look great nearly everywhere.\nNow the page looks like this:\nAnd that's it. About as minimal as it's going to get.\nTo-do:  Replace my favicon with something which is not a beloved and trademarked character Create a StackOverflow account to upvote the answers which helped create this page Contact Matt about article.locale_date.  "});index.add({'id':14,'href':'/docs/2-projects/deep-hedging/','title':"Deep Hedging",'content':""});index.add({'id':15,'href':'/docs/2-projects/deep-hedging/neural-networks-for-hedging-2/','title':"Neural Networks for Hedging: Part 2",'content':"Neural Networks for Hedging: Introduction This is Part 2, Part 1 can be found here. All the code for both parts is available on Github. Our goal is to implement the 2018 (published in 2019) paper by Beuhler et al., \u0026ldquo;Deep Hedging\u0026rdquo;, using PyTorch.\nIn Part 1, we built a very simple neural net with two hidden layers. As a first test-case, we used it to approximate the Black-Scholes delta function, when the true analytical delta is used as the loss function. Then, we attempted to learn the appropriate delta when the loss function was the profit and loss that arises from selling a vanilla call option and hedging with the underlying asset. Both of these experiments were done in a single timestep model, such that we sell the option today, implement our hedge, and the option expires one timestep from now, where we realize the profit or loss on our implemented hedge.\nHere, we attempt to learn the two timestep hedge, but without making the network any deeper. Instead, we build a recurrent neural net.\nA Recurrent Neural Network We will use the same neural network structure as in Part 1, but with the addition of a hidden state.\nThis neural network, with two hidden layers as before, is traversed at each timestep and receives as input the price of the underlying asset for that time, as well as the delta from the previous timestep, representing the hidden state. At each timestep, the network outputs the delta for that time.\nThe network is recurrent, as the output at the current time (the hidden state), feeds into the network as an input at the next timestep. An alternative in our case would be to have a separate neural network for each timestep, with two hidden layers each. This would work, but would greatly increase the number of parameters that need to be trained.\nIn PyTorch, the network is defined as follows:\nclass Net(nn.Module):\rdef __init__(self, num_neurons):\rsuper(Net, self).__init__()\rself.lin1 = nn.Linear(2, num_neurons)\rself.sig1 = nn.Sigmoid()\rself.bn1 = nn.BatchNorm1d(num_neurons)\rself.lin2 = nn.Linear(num_neurons, 1)\rself.sig2 = nn.Sigmoid()\rdef forward(self, X):\rbatch_size, steps, _ = X.shape\routput = []\rself.y = torch.rand(batch_size, 1)\rfor i in range(steps):\rself.y = torch.cat((X[:,i,:], self.y), dim=1)\rself.y = self.bn1(self.sig1(self.lin1(self.y)))\rself.y = self.sig2(self.lin2(self.y));\routput.append(self.y)\rreturn output, self.y The recurrent nature of the net comes from the for loop inside the forward method. There are two further modifications to the structure from Part 1: an additional sigmoid function on the first linear layer and a batch normalization procedure applied before the second layer. Batch normalization was recommended in the original paper and greatly increased the learning rate of the network.\nLearning The Two-step Hedge We attempt to learn the best hedge position at each timestep by minimizing the terminal profit and loss.\nAt $t_0$ we sell a call option for $C_0$ and buy $\\delta_0$ units of the underlying stock, $S_0$. At $t_1$ we rebalance our hedge by adjusting our holding in the stock (our final position must be $\\delta_1$). Finally, at $T = t_2$ we have to pay out the payoff of the option (if positive) and close out our position. Thus, the function we want to minimize looks like\n$$ \\delta_1(S_2 - S_1) + \\delta_0(S_1 - S_0) + C_0 - (S_2 - K)^+ $$\nand our network must provide both $\\delta_0$ and $\\delta_1$. Again these should be close to the Black-Scholes deltas, with the difference accounting for the discrete-time nature of the hedge.\nTo create the training set, we need to price the call options at $t_0$ as well as simulate realizations for the underlying asset at $t_1$ and $t_2$.\nThe training of the RNN is illustrated below and contrasted to the analytical Black-Scholes delta at each timestep.\nNext Steps Roughly:\n What is happening in the tails at $t_1$? Are there simply too few samples there to learn the appropriate shape? Expand the two-period hedge to a $n$-period hedge. I am dissatisfied that the PyTorch RNNCell couldn't match my requirements here and that's worth investigating. I'll also need to get significantly more skilled at manipulating arrays. As before, I still intend to change the underlying model to Heston. For this, we'll need two-dimensional inputs, as we'll require a derivative trading instrument to hedge the volatility.  "});index.add({'id':16,'href':'/docs/2-projects/deep-hedging/neural-networks-for-hedging-1/','title':"Neural Networks for Hedging: Part 1",'content':"Neural Networks for Hedging: Part 1 Introduction The purpose of this page is track my progress implementing the 2018 (published in 2019) paper by Beuhler et al., \u0026ldquo;Deep Hedging\u0026rdquo;. In that paper they use a semi-recurrent deep neural network to calculate the appropriate hedging positions when hedging vanilla options.\nThey begin in a simulation setting using the Heston model and their network is implemented using TensorFlow. Owing to the current state of machine learning frameworks, as well as to the fact that one of my colleagues already has TensorFlow experience, I have decided to use PyTorch.\nA First Network Beuhler et al. use a neural network with two hidden layers to compute the necessary position (delta) in the underlying for that trading day. The network is semi-recurrent because the delta for day $i$ is used as an input for the new network at day $i+1$. It is also very deep as you essentially have two hidden layers per trading day.\nTo start, I construct the simplest neural network based on their hyperparameters. They use $d+15$ nodes per hidden layer, where $d$ is the number of inputs (the underlying assets to be traded). Using PyTorch, the network is defined as follows:\n# Imports and Seeds\r import numpy as np\rimport scipy.stats as stats\rimport matplotlib.pyplot as plt\rimport torch\rimport torch.nn as nn\rimport torch.optim as optim\rnp.random.seed(0)\rtorch.manual_seed(0)\r# Construct Neural Net\r class Net(nn.Module):\rdef __init__(self):\rsuper(Net, self).__init__()\rself.lin1 = nn.Linear(1, 16)\rself.lin2 = nn.Linear(16, 1)\rself.sigmoid1 = nn.Sigmoid();\rdef forward(self, S0):\rout = self.lin1(S0)\rout = self.lin2(out)\rout = self.sigmoid1(out)\rreturn out net = Net() Note that I'm using a sigmoid activation function on the second hidden layer, whereas Beuler et al. use ReLU. I'll get back to this. This simple network can be represented graphically in its entirety: The input (single node on the left) will be the normalized price of the underlying asset, whereas the output (single node on the right) would be optimal trading position in that asset.\nThe mathematical operations being performed by each layer can be easily visualized by saving the Pytorch model and then importing it into Netron. (Note: In theory, TensorBoard is really the way to do this, but I was having compatibility issues.)\nLearning The Black-Scholes Delta To check that the network is implemented correctly, I test whether it can approximate a known non-linear function. For this, I generate a random sample of initial stock price values and use as a target the corresponding Black-Scholes deltas for a call option struck at $100$, one week from maturity.\n# Functions\r def d1(S0, K, T, r, sigma):\rreturn (np.log(S0 / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\rdef d2(S0, K, T, r, sigma):\rreturn d1(S0, K, T, r, sigma) - sigma * np.sqrt(T)\rdef price_put_BS(S0, K, T, r, sigma):\rreturn (stats.norm.cdf(-d2(S0, K, T, r, sigma)) * K * np.exp(-r * T) - stats.norm.cdf(-d1(S0, K, T, r, sigma)) * S0)\rdef price_call_BS(S0, K, T, r, sigma):\rreturn (stats.norm.cdf(d1(S0, K, T, r, sigma)) * S0 - stats.norm.cdf(d2(S0, K, T, r, sigma)) * K * np.exp(-r * T))\rdef delta_put_BS(S0, K, T, r, sigma):\rreturn -stats.norm.cdf(-d1(S0, K, T, r, sigma))\rdef delta_call_BS(S0, K, T, r, sigma):\rreturn stats.norm.cdf(d1(S0, K, T, r, sigma));\r# Parameters\r filename = \u0026#39;bs_delta_1\u0026#39;\rS0 = 100\rK = 100\rT = 1/50\rr = 0.05\rsigma = 0.2\rnum_samples = 1000;\rnum_epochs = 15;\rbatch_size = 4;\rS0_lower_bound = 90;\rS0_upper_bound = 110;\runiform_samples = np.random.rand(num_samples, 1)\rS0_values = (S0_upper_bound - S0_lower_bound) * uniform_samples + S0_lower_bound\rdelta_values = delta_call_BS(S0_values, K, T, r, sigma) I setup up easy-to-use iterables using torch.utils.data. As a loss function, I use the standard mean-squared error and for an optimizer I use stochastic gradient descent.\n# Create Data Loaders\r training_set = torch.utils.data.TensorDataset(torch.Tensor(uniform_samples), torch.Tensor(delta_values))\rtraining_loader = torch.utils.data.DataLoader(training_set, batch_size=batch_size,\rshuffle=True)\r# Define Loss Function and Optimizer\r criterion = nn.MSELoss()\roptimizer = optim.SGD(net.parameters(), lr=0.1)\rWith all of this in place, we can finally train the network to approximate the analytical delta.\nfor epoch in range(num_epochs):\rrunning_loss = 0.0\rfor i, data in enumerate(training_loader, 0):\rinputs, targets = data;\r# Zero the parameter gradients\r optimizer.zero_grad()\r# Forward + Backward + Optimize\r outputs = net(inputs)\rloss = criterion(outputs, targets)\rloss.backward()\roptimizer.step()\r# Print statistics\r running_loss += loss.item()\rprint(\u0026#39;[%d] loss: %.6f\u0026#39; % (epoch + 1, running_loss))\rAs can be seen below, our simple network manages to approximate the analytical Black-Scholes delta quite quickly.\nLearning A One-step Hedge The next step is to attempt to learn the best hedge position without any knowledge of the analytical delta, but rather by trying to minimize the profit and loss. The simplest case is a one-period model.\nAt $t_0$ we sell a call option for $C_0$ and buy $\\delta_0$ units of the underlying stock, $S_0$. Then at $T_1$ we have to pay out the payoff of the option (if positive) and close out our position. Thus, the function we want to minimize looks like\n$$ \\delta_0(S_1 - S_0) + C_0 - (S_1 - K)^+ $$\nThis will be close to the Black-Scholes delta, with a difference accounting for the discrete-time nature of the hedge. We need to price the call options at $t_0$ as well as simulate realizations for the underlying asset at $t_1$. I also construct new data loaders.\nuniform_samples = np.random.rand(num_samples, 1)\rnormal_samples = np.random.randn(num_samples, 1)\rS0_values = (S0_upper_bound - S0_lower_bound) * uniform_samples + S0_lower_bound\rS1_values = S0_values * np.exp((r - 0.5 * sigma **2) * T + sigma * np.sqrt(T) * normal_samples)\rcall_values = price_call_BS(S0_values, K, T, r, sigma)\rtraining_set = torch.utils.data.TensorDataset(torch.Tensor(uniform_samples),\rtorch.Tensor(S0_values), torch.Tensor(S1_values),\rtorch.Tensor(call_values))\rtraining_loader = torch.utils.data.DataLoader(training_set, batch_size=batch_size,\rshuffle=True)\rThere's no need to define a custom loss function, as you can cast the problem in terms of MSE. Then we can train the network.\nfor epoch in range(num_epochs):\rrunning_loss = 0.0\rfor i, data in enumerate(training_loader, 0):\rinputs, S0, S1, C0 = data;\r# Zero the parameter gradients\r optimizer.zero_grad()\r# Forward + Backward + Optimize\r outputs = net(inputs)\rloss = criterion(outputs * (S1 - S0) + C0, torch.max(S1 - K, torch.zeros(batch_size, 1)))\rloss.backward()\roptimizer.step()\r# Print statistics\r running_loss += loss.item()\rprint(\u0026#39;[%d] loss: %.6f\u0026#39; % (epoch + 1, running_loss))\rThe optimization here is not as smooth as for the previous case, which is to be expected considering the additional randomness (the simulations of $S_1$) and non-linearity (we're further removed from the target function). The convergence is illustrated below.\nNext Steps Roughly:\n Implement a two-period hedge. This requires constructing a semi-recurrent network, for which I'll need additional PyTorch API knowledge. Change the underlying model to Heston. For this, we'll need two-dimensional inputs, as we'll require a derivative trading instrument to hedge the volatility.  Resources The simple neural network was visualized using\n Netron and NN SVG  Both have browser-based implementations available. I edit the resulting SVGs using Inkscape.\n"});index.add({'id':17,'href':'/docs/3-areas/programming/becoming_a_quantitative_developer/','title':"Becoming a Quantitative Developer (Deprecated)",'content':"Table of Contents  Introduction Getting Started Resources  Programming Languages Editor Version Control Software Development    Introduction  This page serves as a learning guide for the important skills of a quantitative developer. It is primarily inspired by the QuantStart Self-Study Plan for Becoming a Quantitative Developer. The skills are divided in four rough and overlapping categories:\n Programming: The ability to solve a problem in a specific programming language. Editor / IDE: The ability to get the most out of your editor or IDE, which makes a large difference to productivity. Version Control: Good version control practices. No more \u0026ldquo;Save As\u0026rdquo;. Software Development: Knowledge of how to engineer good, maintainable software as well as how to manage software-based projects.  The intention is to build a solid foundation in each of these areas and then specialize as needed. Our goals are three-fold:\n Become productive as quickly as possible. This is to justify the investment both to ourselves and our employers as necessary. To learn together. The learning process works best with other people. We are all going to use the same tools and commit to the same deadlines so that we can discuss the problems that arise and help each other out. Develop skills that are relevant to our further career development. As much as possible, we want to learn skills that are future proof and not only specific to our current role and environment.  In light of these goals, I cautiously make the following recommendations: For programming languages, we will learn Python and C++. As an editor, we will use Visual Studio Code. In terms of version control, we will learn the ubiquitous Git and host our personal learning projects on GitHub. I don't know much about software development at this stage, so we'll stick to the recommendations made in the self-study guide above.\nGetting Started  This guide assumes that you're using Windows. You'll need to install the following software:\n Visual Studio Community Edition (For C++ development only, and you'll need admin rights) Visual Studio Code Git for Windows  The default options should all be fine.   Miniconda for Python 3.x (We'll use this to manage our Python environments)  Once all the necessary software is installed, we'll need to set up some things. The first thing to do is go create a personal GitHub account so that you can start practicing your version control as we work through the exercises. Then we can start setting up our development environments.\nGetting Started with Visual Studio Code and Python To get started, we will work through the official Getting Started with Python in VS Code tutorial, but first note the following:\n VS Code extensions can be installed by clicking on the Extensions button on the left-hand side of the VS Code window and then searching for the appropriate extension and clicking install. I recommend you create a single folder for all your python code, with your projects as subfolders. For example, C:\\dev\\python\\hello for the \u0026lsquo;\u0026lsquo;hello\u0026rsquo;\u0026rsquo; project in the tutorial. When the official tutorial says \u0026lsquo;\u0026lsquo;At the command prompt or terminal\u0026rsquo;', we will use our Anaconda prompt, which was installed along with Miniconda. I recommend you pin the Anaconda prompt to your start menu, or add it as a desktop icon. When the tutorial discusses selecting the Python interpreter, you should select the one containing ('base':conda). This is because we are using Conda as our Python package and environment manager. On your first try, consider skipping the section on debugging, and rather move on to the example below. Although configuring the debugger is very useful, and we will use it later, it can be intimidating. DON'T follow the instructions in the Install and use packages section of the tutorial! We won't be mixing virtual environments with our Conda environments. See below instead.  Packages and Environments with Conda Following on from the tutorial, create a new file called standardplot.py and copy and paste the following code:\nimport matplotlib.pyplot as plt\rimport numpy as np\rx = np.linspace(0, 20, 100) # Create a list of evenly-spaced numbers over the range\r plt.plot(x, np.sin(x)) # Plot the sine of each x point\r plt.show() # Display the plot\r This code won't run, because the matplotlib package is not installed in the current environment, known as base. So we're going to create a new environment for our program, activate it (switch context to it) and then install matplotlib. Then we can select the new environment as our Python interpreter and run the above code.\nIn the Anaconda prompt (the one you used to start VS Code, NOT the integrated terminal inside VS Code), create a new environment called tutorial using the Conda command:\nconda create --name tutorial\r(If you get a bad handshake error, check out this link.) Then switch to the environment, by activating it:\nactivate tutorial\rNow we'll use Conda as a package manager to install the matplotlib package in our new tutorial environment (along with all its dependencies):\nconda install matplotlib\rOnce this is completed, restart VS Code. Use the command palette to select a Python interpreter (as we did in the start of the tutorial), but now select the interpreter associated with your new environment, tutorial. You'll now be able to run the new file and use the matplotlib package.\nFor a handy reference to the Conda commands, see the official cheat sheet. To learn more about using Conda as the Python environment and package manager in VS Code, see Using Python environments in VS Code.\nResources  The idea is to use reference material that comes recommended by experienced developers (thanks Reddit and StackOverflow) and is established enough that a consensus has been reached on the quality. We want to be idiomatic from the start: let's learn the language as if we didn't know any other.\nProgramming Languages  Learning C++  \u0026ldquo;Programming: Principles and Practice Using C++\u0026rdquo; by Stroustrup. \u0026ldquo;Accelerated C++: Practical Programming by Example\u0026rdquo; by Koenig and Moo. \u0026ldquo;Effective C++\u0026rdquo; by Meyers.  Learning Python  The Official Python Tutorial. \u0026ldquo;Effective Python: 59 Specific Ways to Write Better Python\u0026rdquo; by Slatkin. \u0026ldquo;Python Cookbook: Recipes for Mastering Python 3\u0026rdquo; by Beazly and Jones. \u0026ldquo;Fluent Python: Clear, Concise and Effective Programming\u0026rdquo; by Ramahlo.  Editor  I have not yet found a project- or outcome-based VS Code tutorial and this is ideally what we would've like to do first. Perhaps we should make one.\n VS Code Can Do That?!  Version Control   Learn Git in the Browser by Github. Pro Git by Chacon and Straub.  Software Development   \u0026ldquo;Code Complete: A Practical Handbook of Software Construction\u0026rdquo; by McConnel. \u0026ldquo;Clean Code: A Handbook of Agile Software Craftsmanship\u0026rdquo; by Martin.  "});index.add({'id':18,'href':'/posts/','title':"Posts",'content':""});index.add({'id':19,'href':'/posts/goisforlovers/','title':"(Hu)go Template Primer",'content':"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\r Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\r Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\r Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\r Example 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Example 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\r Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline's output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\r is the same as\n{{ eq 1 1 | if }} Same {{ end }}\r It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\r Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\r Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\r Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn't make a lot of sense. We've defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rHere is the corresponding code inside of the template:\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:\rCopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34;\rTwitterUser: \u0026#34;spf13\u0026#34;\rSidebarRecentLimit: 5\rWithin a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rAn alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rFinally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r"});index.add({'id':20,'href':'/categories/','title':"Categories",'content':""});index.add({'id':21,'href':'/categories/development/','title':"Development",'content':""});index.add({'id':22,'href':'/tags/development/','title':"development",'content':""});index.add({'id':23,'href':'/posts/hugoisforlovers/','title':"Getting Started with Hugo",'content':"Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\r Once you've gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\r Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\r Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it's finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"});index.add({'id':24,'href':'/tags/go/','title':"go",'content':""});index.add({'id':25,'href':'/categories/golang/','title':"golang",'content':""});index.add({'id':26,'href':'/tags/golang/','title':"golang",'content':""});index.add({'id':27,'href':'/tags/hugo/','title':"hugo",'content':""});index.add({'id':28,'href':'/tags/','title':"Tags",'content':""});index.add({'id':29,'href':'/tags/templates/','title':"templates",'content':""});index.add({'id':30,'href':'/tags/themes/','title':"themes",'content':""});index.add({'id':31,'href':'/docs/5-archives/example/2nd/3rd/4th/','title':"4th",'content':"4th Level of Menu Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"});index.add({'id':32,'href':'/docs/5-archives/example/hidden/','title':"Hidden",'content':"This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\r Fronde cetera dextrae sequens pennis voce muneris Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "});index.add({'id':33,'href':'/docs/5-archives/shortcodes/buttons/','title':"Buttons",'content':"Buttons Buttons are styled links that can lead to local page or external link.\n{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}}\r{{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}\rExample \rGet Home\r\rContribute\r\r"});index.add({'id':34,'href':'/docs/5-archives/shortcodes/columns/','title':"Columns",'content':"Columns Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!--begin columns block --\u0026gt;\r# Left Content\rLorem markdownum insigne...\r\u0026lt;---\u0026gt; \u0026lt;!--magic sparator, between columns --\u0026gt;\r# Mid Content\rLorem markdownum insigne...\r\u0026lt;---\u0026gt; \u0026lt;!--magic sparator, between columns --\u0026gt;\r# Right Content\rLorem markdownum insigne...\r{{\u0026lt; /columns \u0026gt;}}\rExample Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\rMid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\r\rRight Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\r\r"});index.add({'id':35,'href':'/docs/5-archives/shortcodes/expand/','title':"Expand",'content':"Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}}\r## Markdown content\rLorem markdownum insigne...\r{{\u0026lt; /expand \u0026gt;}}\r\rExpand\r↕\r\rMarkdown content Lorem markdownum insigne\u0026hellip;\r\r\r\rWith Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}}\r## Markdown content\rLorem markdownum insigne...\r{{\u0026lt; /expand \u0026gt;}}\r\rCustom Label\r...\r\rMarkdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\r\r\r"});index.add({'id':36,'href':'/docs/5-archives/shortcodes/hints/','title':"Hints",'content':"Hints Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}}\r**Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\rstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r{{\u0026lt; /hint \u0026gt;}}\rExample Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\r"});index.add({'id':37,'href':'/docs/5-archives/shortcodes/katex/','title':"Katex",'content':"KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample {{\u0026lt; katex [class=\u0026#34;text-center\u0026#34;] \u0026gt;}}\rx = \\begin{cases}\ra \u0026amp;\\text{if } b \\\\\rc \u0026amp;\\text{if } d\r\\end{cases}\r{{\u0026lt; /katex \u0026gt;}}\rx = \\begin{cases} a \u0026amp;\\text{if } b \\\nc \u0026amp;\\text{if } d \\end{cases}\nDoes inline math work with $$x=17$$ mmark?\n"});index.add({'id':38,'href':'/docs/5-archives/shortcodes/mermaid/','title':"Mermaid",'content':"Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.\nExample {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}}\rsequenceDiagram\rAlice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you?\ralt is sick\rBob-\u0026gt;\u0026gt;Alice: Not so good :(\relse is well\rBob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy\rend\ropt Extra response\rBob-\u0026gt;\u0026gt;Alice: Thanks for asking\rend\r{{\u0026lt; /mermaid \u0026gt;}}\r\r\r\r\r"});index.add({'id':39,'href':'/docs/5-archives/shortcodes/tabs/','title':"Tabs",'content':"Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}}\r{{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}}\r{{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}}\r{{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}}\r{{\u0026lt; /tabs \u0026gt;}}\rExample MacOS\r\rMacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n\rLinux\r\rLinux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n\rWindows\r\rWindows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n\r\r"});index.add({'id':40,'href':'/docs/5-archives/example/2nd/','title':"2nd",'content':"2nd Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':41,'href':'/docs/5-archives/example/2nd/3rd/','title':"3d",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "});index.add({'id':42,'href':'/docs/','title':"Docs",'content':""});index.add({'id':43,'href':'/docs/5-archives/example/','title':"Example Site",'content':"Introduction Ferre hinnitibus erat accipitrem dixi Troiae tollens Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\r Trepident sitimque Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"});index.add({'id':44,'href':'/docs/5-archives/shortcodes/','title':"Shortcodes",'content':""});index.add({'id':45,'href':'/docs/5-archives/example/table-of-contents/','title':"Table of Contents",'content':"Ubi loqui Mentem genus facietque salire tempus bracchia Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r Placabilis coactis nega ingemuit ignoscat nimia non Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) {\rzif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\rgigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\rpanel_point_firmware);\rspyware_bash.statePopApplet = express_netbios_digital(\rinsertion_troubleshooting.brouter(recordFolderUs), 65);\r}\rrecursionCoreRay = -5;\rif (hub == non) {\rportBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\rfont_radcab, guidCmsScalable + reciprocalMatrixPim);\rleft.bug = screenshot;\r} else {\rtooltipOpacity = raw_process_permalink(webcamFontUser, -1);\rexecutable_router += tape;\r}\rif (tft) {\rbandwidthWeb *= social_page;\r} else {\rregular += 611883;\rthumbnail /= system_lag_keyboard;\r}\r Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"});})();